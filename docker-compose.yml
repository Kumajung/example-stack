version: '3.8'

services:
  # Service ที่ 1: PHP และ Apache Web Server
  php-apache:
    image: php:8.2-apache # ใช้ Official Image ของ PHP 8.2 ที่มี Apache ติดตั้งมาให้
    container_name: my-php-app
    volumes:
      - ./public:/var/www/html # Map โฟลเดอร์ public ในโปรเจกต์ของคุณเข้ากับ /var/www/html ใน Container
    ports:
      - "8083:80" # เข้าถึงเว็บของคุณผ่าน Port 8083 บนเครื่อง Host
    depends_on:
      - db # บอกให้เริ่มทำงานหลังจาก Service 'db' (MySQL) พร้อมใช้งาน
    environment:
      # ส่งค่า Environment Variables ไปให้ PHP ใช้เชื่อมต่อ DB
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    networks:
      - app-network

  # Service ที่ 2: MySQL Database
  db:
    image: mysql:8.0
    container_name: my-mysql-db
    restart: always
    environment:
      # ตั้งค่า Root Password และสร้าง Database/User เริ่มต้น
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # รหัสผ่าน Root ของ MySQL
      MYSQL_DATABASE: ${MYSQL_DATABASE} # ชื่อ Database ที่จะสร้าง
      MYSQL_USER: ${MYSQL_USER} # ชื่อ User ที่จะสร้าง
      MYSQL_PASSWORD: ${MYSQL_PASSWORD} # รหัสผ่านของ User
    volumes:
      - db-data:/var/lib/mysql # ใช้ Volume เพื่อเก็บข้อมูล Database อย่างถาวร
    networks:
      - app-network

  # Service ที่ 3: phpMyAdmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: my-phpmyadmin
    restart: always
    ports:
      - "8084:80" # เข้าถึง phpMyAdmin ผ่าน Port 8084
    environment:
      PMA_HOST: db # Tells phpMyAdmin that the database host is the 'db' service
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # Use the MySQL root password to log in
    depends_on:
      - db # ต้องรอให้ db พร้อมก่อน
    networks:
      - app-network

# กำหนด Network ให้ทุก Service คุยกันได้ผ่านชื่อ Service
networks:
  app-network:
    driver: bridge

# กำหนด Volume สำหรับเก็บข้อมูล Database
volumes:
  db-data:
    driver: local